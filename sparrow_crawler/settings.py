"""
Django settings for sparrow_crawler project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '31mk((&#^$8wz^$=pdl&4je30(sb5u021=3saay*@nvebht9jy'

try:
    RUN_ENV = os.environ['RUN_ENV']
except Exception as ex:
    RUN_ENV = 'dev'

'''
pro: 生成环境
dev: 开发环境
test: 测试环境
unit: 单元测试
'''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "adminsite",
    'corsheaders',
    'rest_framework',
    "django_celery_results"
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sparrow_crawler.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sparrow_crawler.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
config = {
    "CELERY_BROKER_URL": {  # celery 的队列服务，redis
        # 'pro': "redis://r-2zef52f9736c5b64.redis.rds.aliyuncs.com:6379/0",
        'pro': os.environ.get('CELERY_BROKER_URL',
                              "redis://:dek7^jdUk4@r-2zef52f9736c5b64.redis.rds.aliyuncs.com:6379/0"),
        'dev': os.environ.get('CELERY_BROKER_URL',
                              "redis://redis:6379/0"),
        'test': os.environ.get('CELERY_BROKER_URL',
                               "redis://:slejUEINF3498@test-redia.redis.rds.aliyuncs.com:6379/0"),
        'unit': os.environ.get('CELERY_BROKER_URL',
                               "redis://redis:6379/0"),
    },
    "SC_FILE_PATH": {
        'dev': os.environ.get('SC_FILE_PATH',
                               "/Users/tinawang/Documents/xls/"),
        'test': os.environ.get('SC_FILE_PATH',
                               "/Users/tinawang/Documents/xls/"),
    }

}

DATABASES = {
    'default': {
        # DATABASE_ENGINE, 测试使用
        'ENGINE': "django.db.backends." + os.environ.get('DATABASE_ENGINE', 'mysql'),
        'NAME': os.environ.get('DATABASE_NAME', "sparrow_test"),
        'USER': os.environ.get('DATABASE_USER', "hg_test"),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', "jft87JheHe23"),
        'HOST': os.environ.get('DATABASE_HOST', "rm-2zet7b5nul2095i22wo.mysql.rds.aliyuncs.com"),
        # Or an IP Address that your DB is hosted on
        'PORT': os.environ.get('DATABASE_PORT', "3306"),  # Or an IP Address that your DB is hosted on'3306',
    },
}

REST_FRAMEWORK = {
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser'
    # ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # 这个render有时会导致在浏览器里运行GET时出错
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5000,
    # 'TEST_REQUEST_RENDERER_CLASSES': (
    #     'rest_framework.renderers.JSONRenderer'
    # ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CORS_ORIGIN_ALLOW_ALL = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
#
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# 允许的格式
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'yaml']

CELERY_BROKER_URL = config['CELERY_BROKER_URL'][RUN_ENV]  # redis作为中间件
CELERY_BROKER_TRANSPORT = 'redis'
CELERY_RESULT_BACKEND = 'django-db'  # 使用database作为结果存储

SC_FILE_PATH=config['SC_FILE_PATH'][RUN_ENV]